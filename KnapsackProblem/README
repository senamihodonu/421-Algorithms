## Overview
The goal of this project is to use two dynamic programming approaches, top-down+memoization
and bottom-up methods and greedy algorithm to solve one optimization problem. For comparison 
purposes, the program print out the number of recursive calls for the top-down+memoization 
approach and the number of table references for the bottom-up approach.

## Manifest
Project contains the following files:

.
├── KnapsackBU.java
├── KnapsackGA.java
├── KnapsackTD.java
├── Makefile
├── README
├── run_test
├── tests
│   ├── v1.txt
│   ├── v.txt
│   ├── w1.txt
│   └── w.txt
├── UML_diagram.pdf
└── Utils.java

## Compiling and Using
To compile from the top directory:

$ javac *.java

or

$ make

After a successful build, the following command is issued to run program:
buttom-up
$ java KnapsackBU <n> <W> <w.txt> <v.txt> [<debug_level>]

top-down
$ java KnapsackTD <n> <W> <w.txt> <v.txt> [<debug_level>]

greedy
$ java KnapsackGA <n> <W> <w.txt> <v.txt> 


To clean the directory, issue the following command from the top directory:

$ make clean

## Testing
Below are some of the valid DFA tested with the program:
├── tests
│   ├── v1.txt
│   ├── v.txt
│   ├── w1.txt
│   └── w.txt

## Sources used
https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashSet.html
https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/#:~:text=The%20LinkedHashSet%20is%20an%20ordered,maintained%20this%20class%20is%20used.
https://www.geeksforgeeks.org/java-program-to-write-into-a-file/
https://www.codespeedy.com/algorithm-for-the-fractional-knapsack-problem-java/
https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/
https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews/RM1BDv71V60